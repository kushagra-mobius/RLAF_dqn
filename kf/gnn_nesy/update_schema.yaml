name: Update Schema Row
description: Updates a row in a schema based on a mapping between column names and a JSON object.

inputs:
  - { name: schema_id, type: String, description: "The ID of the schema to update." }
  - { name: update_data_json, type: String, description: "JSON string containing the data to update." }
  - { name: mapping_json, type: String, description: "JSON string mapping column names to keys in update_data_json." }
  - { name: model_id, type: String, description: "The ID of the model to filter by." }
  - { name: execution_id, type: String, description: "The ID of the model to filter by." }
  - { name: tenant_id, type: string, description: "The ID of the tenant." }
  - { name: project_id, type: String, description: "The ID of the project." }
  - { name: architecture_type, type: String, description: "The architecture type." }
  - { name: multiple_rows_json, type: String, description: "JSON string containing a list of rows to create." }
  - { name: bearer_auth_token, type: string, description: "Bearer token for authentication." }
  - { name: domain, type: String, description: "The domain for the API endpoint." }

implementation:
  container:
    image: python:3.9-slim
    command:
      - sh
      - -c
      - |
        pip install requests
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import json
        import argparse
        import requests

        parser = argparse.ArgumentParser()
        parser.add_argument('--schema_id', type=str, required=True)
        parser.add_argument('--update_data_json', type=str, required=True)
        parser.add_argument('--mapping_json', type=str, required=True)
        parser.add_argument('--model_id', type=str, required=True)
        parser.add_argument('--execution_id', type=str, required=True)
        parser.add_argument('--tenant_id', type=str, required=True)
        parser.add_argument('--project_id', type=str, required=True)
        parser.add_argument('--architecture_type', type=str, required=True)
        parser.add_argument('--multiple_rows_json', type=str, required=True)
        parser.add_argument('--bearer_auth_token', type=str, required=True)
        parser.add_argument('--domain', type=str, required=True)
        args = parser.parse_args()

        with open(args.bearer_auth_token, 'r') as f:
            bearer_auth_token = f.read().strip()

        with open(args.tenant_id, 'r') as f:
            tenant_id = f.read().strip()
        print(f"{args.update_data_json}")
        print(f"{args.mapping_json}")
        update_data = json.loads(args.update_data_json)
        mapping = json.loads(args.mapping_json)

        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {bearer_auth_token}'
        }

        if args.multiple_rows_json != '-1':
            rows_to_create = json.loads(args.multiple_rows_json)
            for row in rows_to_create:
                if args.tenant_id != '-1':
                    row['tenant_id'] = args.tenant_id
                if args.project_id != '-1':
                    row['project_id'] = args.project_id
                if args.architecture_type != '-1':
                    row['architecture_type'] = args.architecture_type
                if 'execution_id' not in row and args.execution_id != '-1':
                    row['execution_id'] = args.execution_id
            
            create_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
            create_payload = {"data": rows_to_create}
            
            try:
                response = requests.post(create_url, headers=headers, data=json.dumps(create_payload))
                response.raise_for_status()
                print("Successfully created multiple model instances.")
                print(f"Response: {response.json()}")
            except requests.exceptions.RequestException as e:
                print(f"Error creating multiple model instances: {e}")
                print(f"Request payload: {json.dumps(create_payload)}")
                if e.response:
                    print(f"Response content: {e.response.text}")
                exit(1)
        else:
            # Check if model_id exists
            check_url = f"{args.domain}/pi-entity-instances-service/v3.0/schemas/{args.schema_id}/instances/list"
            check_payload = {
                "dbType": "TIDB",
                "ownedOnly": True,
                "filter": {
                    "model_id": args.model_id
                }
            }
            
            try:
                response = requests.post(check_url, headers=headers, data=json.dumps(check_payload))
                response.raise_for_status()
                response_data = response.json()
                
                if response_data.get("content"):
                    # Update existing row
                    patch_requests = []
                    for column, keys in mapping.items():
                        value_to_patch = None
                        if isinstance(keys, list):
                            value_to_patch = {key: update_data.get(key) for key in keys if key in update_data}
                        else:
                            if keys in update_data:
                                value_to_patch = str(update_data.get(keys))

                        if value_to_patch is not None:
                            patch_requests.append({
                                "operation": "REPLACE",
                                "path": column,
                                "value": value_to_patch
                            })

                    update_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
                    update_payload = {
                        "dbType": "TIDB",
                        "conditionalFilter": {
                            "conditions": [
                                {
                                    "field": "model_id",
                                    "operator": "EQUAL",
                                    "value": args.model_id
                                }
                            ]
                        },
                        "partialUpdateRequests": [
                            {
                                "patch": patch_requests
                            }
                        ]
                    }
                    
                    response = requests.patch(update_url, headers=headers, data=json.dumps(update_payload))
                    response.raise_for_status()
                    print("Successfully updated the model instance.")
                else:
                    # Create new row
                    creation_data = update_data.copy()
                    creation_data['model_id'] = args.model_id
                    if args.tenant_id != '-1':
                        creation_data['tenant_id'] = args.tenant_id
                    if args.project_id != '-1':
                        creation_data['project_id'] = args.project_id
                    if args.architecture_type != '-1':
                        creation_data['architecture_type'] = args.architecture_type

                    create_url = f"{args.domain}/pi-entity-instances-service/v2.0/schemas/{args.schema_id}/instances"
                    create_payload = {
                        "data": [creation_data]
                    }
                    
                    response = requests.post(create_url, headers=headers, data=json.dumps(create_payload))
                    response.raise_for_status()
                    print("Successfully created a new model instance.")
                    
                print(f"Response: {response.json()}")

            except requests.exceptions.RequestException as e:
                print(f"Error: {e}")
                if e.response:
                    print(f"Response content: {e.response.text}")
                exit(1)

    args:
      - --schema_id
      - {inputValue: schema_id}
      - --update_data_json
      - {inputValue: update_data_json}
      - --mapping_json
      - {inputValue: mapping_json}
      - --model_id
      - {inputValue: model_id}
      - --execution_id
      - {inputValue: execution_id}
      - --tenant_id
      - {inputPath: tenant_id}
      - --project_id
      - {inputValue: project_id}
      - --architecture_type
      - {inputValue: architecture_type}
      - --multiple_rows_json
      - {inputValue: multiple_rows_json}
      - --bearer_auth_token
      - {inputPath: bearer_auth_token}
      - --domain
      - {inputValue: domain}
