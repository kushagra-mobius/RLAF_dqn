name: Trigger Pipeline
description: Triggers an Elyra Kubeflow pipeline using a curl request.
inputs:
  - {name: pickle_cdn_url, type: String, description: "URL to the uploaded pickle file"}
  - {name: config_cdn_url, type: String, description: "URL to the uploaded config string"}
  - {name: access_token, type: string, description: "Bearer token for pipeline trigger authentication"}
  - {name: domain, type: String, description: "Domain for the pipeline trigger API (e.g., https://ig.mobiusdtaas.ai)"}
  - {name: pipeline_id, type: String, description: "ID of the Elyra Kubeflow pipeline to trigger"}
  - {name: experiment_id, type: String, description: "ID of the Kubeflow experiment"}
  - {name: model_config, type: String, description: "JSON string for model configuration"}
  - {name: model_name, type: String, description: "Name of the model to be used"}
  - {name: execution_id, type: String, description: "exec id for the run"}
implementation:
  container:
    image: python:3.8-slim
    command:
      - sh
      - -ec
      - |
        if ! command -v curl &> /dev/null; then
            echo "curl could not be found, installing..."
            apt-get update > /dev/null && apt-get install -y curl > /dev/null
        fi
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import subprocess
        import json
        import os

        parser = argparse.ArgumentParser(description="Trigger an Elyra Kubeflow pipeline.")
        parser.add_argument('--pickle_cdn_url', type=str, required=True, help='URL to the uploaded pickle file.')
        parser.add_argument('--config_cdn_url', type=str, required=True, help='URL to the uploaded config string.')
        parser.add_argument('--access_token', type=str, required=True, help='Bearer token for pipeline trigger authentication.')
        parser.add_argument('--domain', type=str, required=True, help='Domain for the pipeline trigger API.')
        parser.add_argument('--pipeline_id', type=str, required=True, help='ID of the Elyra Kubeflow pipeline to trigger.')
        parser.add_argument('--experiment_id', type=str, required=True, help='ID of the Kubeflow experiment.')
        parser.add_argument('--model_config', type=str, required=True, help='JSON string for model configuration.')
        parser.add_argument('--model_name', type=str, required=True, help='Name of the model to be used.')
        parser.add_argument('--execution_id', type=str, required=True, help='exec id for the run.')
        args = parser.parse_args()

        args.pickle_cdn_url = args.pickle_cdn_url.replace("$$", "$$$")
        args.config_cdn_url = args.config_cdn_url.replace("$$", "$$$")

        trigger_url = f"{args.domain}/bob-service-test/v1.0/pipeline/trigger/ml?pipelineId={args.pipeline_id}"
        with open(args.access_token, 'r') as f:
            access_token = f.read().strip()
        headers = {
            "accept": "application/json",
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

        payload = {
            "pipelineType": "ML",
            "containerResources": {},
            "experimentId": args.experiment_id,
            "enableCaching": True,
            "parameters": {
                "model_name" : args.model_name,
                "model_config" : args.model_config,
                "dataset_cdn_url": args.pickle_cdn_url,
                "weigts_cdn_url": args.config_cdn_url,
                "execution_id": args.execution_id,
                "experiment_id": args.experiment_id
            },
            "version": 1
        }

        print(f"Triggering pipeline at: {trigger_url}")
        print(f"Payload: {json.dumps(payload, indent=2)}")

        curl_command = [
            "curl",
            "--location", trigger_url,
            "--header", f"accept: {headers['accept']}",
            "--header", f"Authorization: {headers['Authorization']}",
            "--header", f"Content-Type: {headers['Content-Type']}",
            "--data", json.dumps(payload),
            "--fail",
            "--show-error",
            "--retry", "5",
            "--retry-delay", "60",
            "--retry-connrefused",
            "--retry-on", "500,502,503,504",
            "--max-time", "30"
        ]

        try:
            process = subprocess.run(
                curl_command,
                capture_output=True,
                check=True
            )
            print("Pipeline trigger successful. Raw response:")
            print(process.stdout.decode('utf-8'))
        except subprocess.CalledProcessError as e:
            print("Error executing curl command to trigger pipeline:")
            print(f"Return code: {e.returncode}")
            print(f"Output: {e.stdout.decode('utf-8')}")
            print(f"Error Output: {e.stderr.decode('utf-8')}")
            raise e
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            raise e
    args:
      - --pickle_cdn_url
      - {inputValue: pickle_cdn_url}
      - --config_cdn_url
      - {inputValue: config_cdn_url}
      - --access_token
      - {inputPath: access_token}
      - --domain
      - {inputValue: domain}
      - --pipeline_id
      - {inputValue: pipeline_id}
      - --experiment_id
      - {inputValue: experiment_id}
      - --model_config
      - {inputValue: model_config}
      - --model_name
      - {inputValue: model_name}
      - --execution_id
      - {inputValue: execution_id}