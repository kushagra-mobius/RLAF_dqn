name: Build Model
description: Instantiates a model, updates config with weights, saves the model, and outputs a combined config and model info JSON.

inputs:
  - { name: weight_in, type: String, description: "Weight info as JSON string (e.g., alpha, class_weights)" }
  - { name: config_str, type: String, description: "Model config as JSON string" }
  - { name: model_name, type: String, description: "Name of the model to instantiate (e.g., tgcn, ffnetwork)" }

outputs:
  - { name: model_out, type: Model, description: "Model weights (torch saved state_dict)" }
  - { name: config_updated, type: String, description: "Updated config as JSON string" }
  - { name: model_info_out, type: String, description: "Combined model info and config as a JSON string" }

implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v12
    command:
      - sh
      - -c
      - |

        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch
        import argparse
        import json
        import os
        from nesy_factory.GNNs import create_model

        parser = argparse.ArgumentParser()
        parser.add_argument('--weight_in', type=str, required=True)
        parser.add_argument('--config_str', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_out', type=str, required=True)
        parser.add_argument('--config_updated', type=str, required=True)
        parser.add_argument('--model_info_out', type=str, required=True)
        args = parser.parse_args()

        config = json.loads(args.config_str)
        weight = json.loads(args.weight_in)
        for key, value in weight.items():
            config[key] = value
        config['model_name'] = args.model_name
        
        model = create_model(args.model_name, config)
        print("Model created successfully.")

        model_info = model.get_model_info()
        print(f"Model Info: {model_info}")

        # Combine config and model_info
        combined_info = {**model_info,**config}

        os.makedirs(os.path.dirname(args.model_out), exist_ok=True)
        os.makedirs(os.path.dirname(args.config_updated), exist_ok=True)
        os.makedirs(os.path.dirname(args.model_info_out), exist_ok=True)

        torch.save(model.state_dict(), args.model_out)

        with open(args.config_updated, 'w') as f:
            json.dump(config, f, indent=2)
            
        with open(args.model_info_out, 'w') as f:
            json.dump(combined_info, f, indent=2)

        print(f"Model saved to {args.model_out}")
        print(f"Updated config saved to {args.config_updated}")
        print(f"Combined model info saved to {args.model_info_out}")
    args:
      - --model_name
      - {inputValue: model_name}
      - --weight_in
      - {inputValue: weight_in}
      - --config_str
      - {inputValue: config_str}
      - --model_out
      - {outputPath: model_out}
      - --config_updated
      - {outputPath: config_updated}
      - --model_info_out
      - {outputPath: model_info_out}