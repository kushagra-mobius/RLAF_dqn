name: Push to Pi and Update RLAF State
description: Uploads new model weights, updates their CDN URLs in the database, and appends the new rlaf2pierce action.
inputs:
  - {name: access_token, type: string}
  - {name: domain, type: String}
  - {name: schema_id, type: String}
  - {name: model_id, type: String}
  - {name: db_data_json, type: Path}
  - {name: updated_policy_model_weights, type: Path}
  - {name: updated_target_model_weights, type: Path}
  - {name: best_action_id, type: Integer}
  - {name: current_state, type: Path}
  - {name: previous_state, type: Path}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -ec
      - |
        if ! command -v curl &> /dev/null; then
            echo "curl could not be found, installing..."
            apt-get update > /dev/null && apt-get install -y curl > /dev/null
        fi
        python3 -m pip install --quiet requests || \
        python3 -m pip install --quiet requests --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, json, requests, os, time, subprocess, uuid

        parser = argparse.ArgumentParser()
        parser.add_argument('--access_token', type=str, required=True)
        parser.add_argument('--domain', type=str, required=True)
        parser.add_argument('--schema_id', type=str, required=True)
        parser.add_argument('--model_id', type=str, required=True)
        parser.add_argument('--db_data_json', type=str, required=True)
        parser.add_argument('--updated_policy_model_weights', type=str, required=True)
        parser.add_argument('--updated_target_model_weights', type=str, required=True)
        parser.add_argument('--best_action_id', type=str, required=True)
        parser.add_argument('--current_state', type=str, required=True)
        parser.add_argument('--previous_state', type=str, required=True)
        args = parser.parse_args()

        with open(args.access_token, 'r') as f:
            access_token = f.read().strip()

        print(f"Starting db_update_dqn component")
        print(f"Inputs:")
        print(f"  domain: {args.domain}")
        print(f"  schema_id: {args.schema_id}")
        print(f"  model_id: {args.model_id}")
        print(f"  db_data_json: {args.db_data_json}")
        print(f"  updated_policy_model_weights: {args.updated_policy_model_weights}")
        print(f"  updated_target_model_weights: {args.updated_target_model_weights}")
        print(f"  best_action_id: {args.best_action_id}")
        print(f"  current_state: {args.current_state}")
        print(f"  previous_state: {args.previous_state}")

        def upload_file_to_cdn(file_path, token, domain):
            if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
                print(f"File {file_path} is empty or does not exist. Skipping upload.")
                return None
            
            upload_url = f"{domain}/mobius-content-service/v1.0/content/upload?filePathAccess=private&filePath=%2Fdqn%2Fweights%2F"
            
            print(f"Uploading file from {file_path} to {upload_url}...")

            curl_command = [
                "curl", "--location", upload_url,
                "--header", f"Authorization: Bearer {token}",
                "--form", f"file=@{file_path}",
                "--fail", "--show-error"
            ]
            
            try:
                process = subprocess.run(
                    curl_command, capture_output=True, check=True, text=True
                )
                response_json = json.loads(process.stdout)
                relative_cdn_url = response_json.get("cdnUrl")
                if not relative_cdn_url:
                    raise ValueError("Failed to parse cdnUrl from CDN response.")
                
                content_url = f"https://cdn.mobiusdtaas.ai{relative_cdn_url}"
                print(f"Upload successful. CDN URL: {content_url}")
                return content_url

            except subprocess.CalledProcessError as e:
                print(f"Error executing curl command: {e}")
                print(f"Stderr: {e.stderr}")
                raise e
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Error processing the server response: {e}")
                raise e

        def update_instance(access_token, domain, schema_id, instance_id, updates):
            update_url = f"{domain}/pi-entity-instances-service/v2.0/schemas/{schema_id}/instances"
            headers = {
                "Authorization": f"Bearer {access_token}", "Content-Type": "application/json"
            }
            patch_operations = [
                {"operation": "REPLACE", "path": field, "value": value}
                for field, value in updates.items()
            ]
            payload = {
                "dbType": "TIDB",
                "conditionalFilter": {"conditions": [{"field": "mdoel_id", "operator": "EQUAL", "value": instance_id}]},
                "partialUpdateRequests": [{"patch": patch_operations}]
            }
            print(f"Update payload: {json.dumps(payload, indent=2)}")
            response = requests.patch(update_url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()

        new_policy_cdn_url = upload_file_to_cdn(args.updated_policy_model_weights, access_token, args.domain)
        new_target_cdn_url = upload_file_to_cdn(args.updated_target_model_weights, access_token, args.domain)

        with open(args.db_data_json, 'r') as f:
            db_data = json.load(f)
        
        instance = db_data['content'][0]
        instance_id = instance['id']

        with open(args.best_action_id, 'r') as f:
            best_action_id_val = f.read().strip()
        with open(args.current_state, 'r') as f:
            current_state_dict = json.load(f)
        with open(args.previous_state, 'r') as f:
            previous_state_dict = json.load(f)

        new_rlaf2pierce_entry = {
            "action_id": int(best_action_id_val),
            "previous_state": previous_state_dict,
            "current_state": current_state_dict,
            "timestamp": int(time.time())
        }
        print(f"New rlaf2pierce entry: {json.dumps(new_rlaf2pierce_entry, indent=2)}")

        if "rlaf2pierce" not in instance:
            instance["rlaf2pierce"] = []
        instance["rlaf2pierce"].append(new_rlaf2pierce_entry)

        update_payload = {"rlaf2pierce": instance["rlaf2pierce"]}
        if new_policy_cdn_url:
            update_payload["policy_cdn"] = new_policy_cdn_url
        if new_target_cdn_url:
            update_payload["target_cdn"] = new_target_cdn_url

        print(f"Updating instance {instance_id}...")
        update_instance(access_token, args.domain, args.schema_id, instance_id, update_payload)
        print(f"Instance {instance_id} updated successfully.")
        print(f"db_update_dqn component finished")

    args:
      - --access_token
      - {inputPath: access_token}
      - --domain
      - {inputValue: domain}
      - --schema_id
      - {inputValue: schema_id}
      - --model_id
      - {inputValue: model_id}
      - --db_data_json
      - {inputPath: db_data_json}
      - --updated_policy_model_weights
      - {inputPath: updated_policy_model_weights}
      - --updated_target_model_weights
      - {inputPath: updated_target_model_weights}
      - --best_action_id
      - {inputPath: best_action_id}
      - --current_state
      - {inputPath: current_state}
      - --previous_state
      - {inputPath: previous_state}