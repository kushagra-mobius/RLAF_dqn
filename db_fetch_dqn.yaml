name: Get from Pi and Prep for DQN
description: Fetches latest pierce2rlaf data, downloads model weights, and prepares inputs for the Double DQN component.
inputs:
  - {name: access_token, type: string}
  - {name: domain, type: String}
  - {name: schema_id, type: String}
  - {name: model_id, type: String}
outputs:
  - {name: db_data_json, type: Path}
  - {name: previous_state, type: Path}
  - {name: current_state, type: Path}
  - {name: action_id, type: Integer}
  - {name: episode, type: Integer}
  - {name: policy_model_weights, type: Path}
  - {name: target_model_weights, type: Path}
  - {name: rlaf_actions_json, type: Path}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        python3 -m pip install --quiet requests || \
        python3 -m pip install --quiet requests --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, json, requests, os

        parser = argparse.ArgumentParser()
        parser.add_argument('--access_token', type=str, required=True)
        parser.add_argument('--domain', type=str, required=True)
        parser.add_argument('--schema_id', type=str, required=True)
        parser.add_argument('--model_id', type=str, required=True)
        parser.add_argument('--db_data_json', type=str, required=True)
        parser.add_argument('--previous_state', type=str, required=True)
        parser.add_argument('--current_state', type=str, required=True)
        parser.add_argument('--action_id', type=str, required=True)
        parser.add_argument('--episode', type=str, required=True)
        parser.add_argument('--policy_model_weights', type=str, required=True)
        parser.add_argument('--target_model_weights', type=str, required=True)
        parser.add_argument('--rlaf_actions_json', type=str, required=True)
        args = parser.parse_args()

        with open(args.access_token, 'r') as f:
            access_token = f.read().strip()

        print(f"Starting db_fetch_dqn component")
        print(f"Inputs:")
        print(f"  Domain: {args.domain}")
        print(f"  Schema ID: {args.schema_id}")
        print(f"  Model ID: {args.model_id}")

        def get_instances(access_token, domain, schema_id, model_id):
            instances_url = f"{domain}/pi-entity-instances-service/v3.0/schemas/{schema_id}/instances/list"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            payload = {"dbType": "TIDB", "ownedOnly": True, "filter": {"model_id": model_id}}
            response = requests.post(instances_url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()

        def download_file(url, output_path):
            print(f"Downloading from {url}...")
            try:
                response = requests.get(url, stream=True)
                response.raise_for_status()
                os.makedirs(os.path.dirname(output_path), exist_ok=True)
                with open(output_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                print(f"Downloaded and saved to {output_path}")
            except requests.exceptions.RequestException as e:
                print(f"Error downloading from {url}: {e}")
                print("Creating an empty file as a fallback.")
                os.makedirs(os.path.dirname(output_path), exist_ok=True)
                open(output_path, 'a').close()


        db_data = get_instances(access_token, args.domain, args.schema_id, args.model_id)

        os.makedirs(os.path.dirname(args.db_data_json), exist_ok=True)
        with open(args.db_data_json, 'w') as f:
            json.dump(db_data, f)
        print(f"Database data fetched and written to {args.db_data_json}")

        instance = db_data['content'][0]
        rlaf_actions = instance['rlaf_actions']

        os.makedirs(os.path.dirname(args.rlaf_actions_json), exist_ok=True)
        with open(args.rlaf_actions_json, 'w') as f:
            json.dump(rlaf_actions, f)
        print(f"RLAF actions written to {args.rlaf_actions_json}")

        if instance.get('pierce2rlaf'):
            print("Found existing pierce2rlaf data. Using the latest entry.")
            latest_pierce2rlaf = instance['pierce2rlaf'][-1]
            previous_state_dict = latest_pierce2rlaf['previous_state']
            current_state_dict = latest_pierce2rlaf['current_state']
            action_id_val = latest_pierce2rlaf['action_id']
            episode_val = latest_pierce2rlaf['episode']
        else:
            print("No pierce2rlaf data found. This is the first run. Initializing with empty states.")
            # The DQN component will create a zero-state dynamically from params_json
            previous_state_dict = {}
            current_state_dict = {}
            action_id_val = -1
            episode_val = 0

        os.makedirs(os.path.dirname(args.previous_state), exist_ok=True)
        with open(args.previous_state, 'w') as f:
            json.dump(previous_state_dict, f)
        print(f"Previous state written to {args.previous_state}")

        os.makedirs(os.path.dirname(args.current_state), exist_ok=True)
        with open(args.current_state, 'w') as f:
            json.dump(current_state_dict, f)
        print(f"Current state written to {args.current_state}")

        os.makedirs(os.path.dirname(args.action_id), exist_ok=True)
        with open(args.action_id, 'w') as f:
            f.write(str(action_id_val))
        print(f"Action ID {action_id_val} written to {args.action_id}")

        os.makedirs(os.path.dirname(args.episode), exist_ok=True)
        with open(args.episode, 'w') as f:
            f.write(str(episode_val))
        print(f"Episode {episode_val} written to {args.episode}")

        policy_cdn_url = instance.get('policy_cdn')
        target_cdn_url = instance.get('target_cdn')

        if policy_cdn_url:
            download_file(policy_cdn_url, args.policy_model_weights)
        else:
            print("policy_cdn URL not found. Creating empty weights file.")
            os.makedirs(os.path.dirname(args.policy_model_weights), exist_ok=True)
            open(args.policy_model_weights, 'a').close()

        if target_cdn_url:
            download_file(target_cdn_url, args.target_model_weights)
        else:
            print("target_cdn URL not found. Creating empty weights file.")
            os.makedirs(os.path.dirname(args.target_model_weights), exist_ok=True)
            open(args.target_model_weights, 'a').close()
        
        print(f"db_fetch_dqn component finished")
        print(f"Outputs created:")
        print(f"  db_data_json: {args.db_data_json}")
        print(f"  previous_state: {args.previous_state}")
        print(f"  current_state: {args.current_state}")
        print(f"  action_id: {args.action_id}")
        print(f"  episode: {args.episode}")
        print(f"  policy_model_weights: {args.policy_model_weights}")
        print(f"  target_model_weights: {args.target_model_weights}")
        print(f"  rlaf_actions_json: {args.rlaf_actions_json}")
    args:
      - --access_token
      - {inputPath: access_token}
      - --domain
      - {inputValue: domain}
      - --schema_id
      - {inputValue: schema_id}
      - --model_id
      - {inputValue: model_id}
      - --db_data_json
      - {outputPath: db_data_json}
      - --previous_state
      - {outputPath: previous_state}
      - --current_state
      - {outputPath: current_state}
      - --action_id
      - {outputPath: action_id}
      - --episode
      - {outputPath: episode}
      - --policy_model_weights
      - {outputPath: policy_model_weights}
      - --target_model_weights
      - {outputPath: target_model_weights}
      - --rlaf_actions_json
      - {outputPath: rlaf_actions_json}